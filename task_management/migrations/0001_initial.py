# Generated by Django 5.2.7 on 2025-10-25 21:43

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TaskTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('task_type', models.CharField(choices=[('payroll_processing', 'Payroll Processing'), ('payroll_rerun', 'Payroll Rerun'), ('email_distribution', 'Email Distribution'), ('voucher_generation', 'Voucher Generation'), ('report_generation', 'Report Generation'), ('data_import', 'Data Import'), ('data_export', 'Data Export'), ('system_backup', 'System Backup'), ('cache_clear', 'Cache Clear'), ('system_maintenance', 'System Maintenance'), ('custom', 'Custom')], max_length=50)),
                ('module', models.CharField(max_length=50)),
                ('title_template', models.CharField(max_length=255)),
                ('description_template', models.TextField(blank=True)),
                ('input_schema', models.JSONField(default=dict, help_text='JSON schema for input validation')),
                ('default_priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('critical', 'Critical')], default='normal', max_length=20)),
                ('estimated_duration', models.DurationField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('task_id', models.CharField(help_text='Celery task ID', max_length=255, unique=True)),
                ('task_type', models.CharField(choices=[('payroll_processing', 'Payroll Processing'), ('payroll_rerun', 'Payroll Rerun'), ('email_distribution', 'Email Distribution'), ('voucher_generation', 'Voucher Generation'), ('report_generation', 'Report Generation'), ('data_import', 'Data Import'), ('data_export', 'Data Export'), ('system_backup', 'System Backup'), ('cache_clear', 'Cache Clear'), ('system_maintenance', 'System Maintenance'), ('custom', 'Custom')], max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('critical', 'Critical')], default='normal', max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('module', models.CharField(help_text='ERP module (payroll, inventory, etc.)', max_length=50)),
                ('progress', models.IntegerField(default=0, help_text='Progress percentage (0-100)')),
                ('total_items', models.IntegerField(default=0, help_text='Total items to process')),
                ('processed_items', models.IntegerField(default=0, help_text='Items processed so far')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('estimated_duration', models.DurationField(blank=True, null=True)),
                ('input_data', models.JSONField(blank=True, default=dict)),
                ('output_data', models.JSONField(blank=True, default=dict)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('error_traceback', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tasks', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tasks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('level', models.CharField(choices=[('debug', 'Debug'), ('info', 'Info'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], max_length=20)),
                ('message', models.TextField()),
                ('data', models.JSONField(blank=True, default=dict)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='task_management.task')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['task_id'], name='task_manage_task_id_06d082_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['status'], name='task_manage_status_8a6c6f_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['task_type'], name='task_manage_task_ty_64a849_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['module'], name='task_manage_module_55ed51_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['created_by'], name='task_manage_created_614442_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['created_at'], name='task_manage_created_6960d3_idx'),
        ),
        migrations.AddIndex(
            model_name='tasklog',
            index=models.Index(fields=['task', 'timestamp'], name='task_manage_task_id_20a9e7_idx'),
        ),
        migrations.AddIndex(
            model_name='tasklog',
            index=models.Index(fields=['level'], name='task_manage_level_68248a_idx'),
        ),
    ]
