from django.contrib import admin
from .models import *


class FormulaIngredientInline(admin.TabularInline):
    model = FormulaIngredient
    extra = 1

# add raw material usage model
@admin.register(RawMaterialUsage)
class RawMaterialUsageAdmin(admin.ModelAdmin):
    list_display = ('raw_material', 'finished_product', 'quantity_used', 'transaction_type', 'notes')
    list_filter = ('transaction_type',)
    search_fields = ('raw_material__name', 'finished_product__name')
    readonly_fields = ('created_at',)
    fieldsets = (
        ('Raw Material Usage Information', {
            'fields': ('raw_material', 'finished_product', 'quantity_used', 'transaction_type', 'notes')
        }),
        ('System Information', {
            'fields': ('created_at',)
        }),
    )

@admin.register(ProductFormula)
class ProductFormulaAdmin(admin.ModelAdmin):
    list_display = ('name', 'final_product', 'expected_output_quantity', 'output_unit', 'is_active', 'version', 'created_at')
    list_filter = ('is_active', 'created_at', 'output_unit')
    search_fields = ('name', 'description', 'final_product__product__title')
    inlines = [FormulaIngredientInline]
    readonly_fields = ('created_at', 'updated_at')
    fieldsets = (
        ('Basic Information', {
            'fields': ('name', 'description', 'is_active', 'version')
        }),
        ('Product Details', {
            'fields': ('final_product', 'expected_output_quantity', 'output_unit')
        }),
        ('System Information', {
            'fields': ('created_by', 'created_at', 'updated_at')
        }),
    )


class BatchRawMaterialInline(admin.TabularInline):
    model = BatchRawMaterial
    extra = 1
    readonly_fields = ('cost',)


class QualityCheckInline(admin.StackedInline):
    model = QualityCheck
    extra = 0
    readonly_fields = ('created_at',)


@admin.register(ProductionBatch)
class ProductionBatchAdmin(admin.ModelAdmin):
    list_display = ('batch_number', 'formula', 'status', 'planned_quantity', 'actual_quantity', 'scheduled_date', 'start_date', 'end_date')
    list_filter = ('status', 'scheduled_date', 'branch')
    search_fields = ('batch_number', 'notes', 'formula__name')
    inlines = [BatchRawMaterialInline, QualityCheckInline]
    readonly_fields = ('batch_number', 'created_at', 'updated_at', 'start_date', 'end_date')
    fieldsets = (
        ('Batch Information', {
            'fields': ('batch_number', 'formula', 'branch', 'status')
        }),
        ('Production Details', {
            'fields': ('planned_quantity', 'actual_quantity', 'scheduled_date', 'start_date', 'end_date')
        }),
        ('Costs', {
            'fields': ('labor_cost', 'overhead_cost', 'notes')
        }),
        ('Management', {
            'fields': ('created_by', 'supervisor')
        }),
        ('System Information', {
            'fields': ('created_at', 'updated_at')
        }),
    )
    
    def get_form(self, request, obj=None, **kwargs):
        form = super().get_form(request, obj, **kwargs)
        if obj is None:
            form.base_fields['created_by'].initial = request.user
        return form


@admin.register(QualityCheck)
class QualityCheckAdmin(admin.ModelAdmin):
    list_display = ('batch', 'result', 'check_date', 'inspector','batch__status')
    list_filter = ('result', 'check_date','batch__status')
    search_fields = ('batch__batch_number', 'notes')
    readonly_fields = ('created_at',)
    list_display_links = ('batch',)
    list_editable = ('result','inspector')


@admin.register(ManufacturingAnalytics)
class ManufacturingAnalyticsAdmin(admin.ModelAdmin):
    list_display = ('date', 'total_batches', 'completed_batches', 'total_production_quantity', 'total_raw_material_cost')
    list_filter = ('date',)
    readonly_fields = ('date', 'total_batches', 'completed_batches', 'failed_batches', 
                      'total_production_quantity', 'total_raw_material_cost', 
                      'total_labor_cost', 'total_overhead_cost')
    
    def has_add_permission(self, request):
        # Analytics should only be generated by the system
        return False
