"""
Django settings for ProcureProKEAPI project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from urllib.parse import urlparse
from .jazzmin import JAZZMIN_SETTINGS
from .jazzmin_ui import JAZZMIN_UI_TWEAKS
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY') or os.getenv('SECRET_KEY') or 'django-insecure-za0e7int-c)lv7ko1b%9i&h64g&p%32!3#qm70dh956h)v)enf'

def env_bool(name: str, default: bool = False) -> bool:
    val = os.getenv(name)
    if val is None:
        return default
    return str(val).strip().lower() in ('1', 'true', 'yes', 'on')

def env_list(name: str, default: list[str] | None = None) -> list[str]:
    raw = os.getenv(name)
    if not raw:
        return default or []
    return [item.strip() for item in raw.split(',') if item.strip()]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_bool('DEBUG', default=True)

# Hosts and CORS/CSRF configuration from environment for production
#ALLOWED_HOSTS = env_list('ALLOWED_HOSTS', default=['*' if DEBUG else '127.0.0.1,192.168.*,10.*,172.*,localhost,erpapi.masterspace.co.ke,erp.masterspace.co.ke,*.masterspace.co.ke'.split(',')])
ALLOWED_HOSTS = ['*']
X_FRAME_OPTIONS = 'SAMEORIGIN'

# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    #third pirty
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_countries',
    'django_filters',
    'phonenumber_field',
    'timezone_field',
    'user_agents',
    'drf_spectacular',
    'drf_spectacular_sidecar',
    'tinymce',
    'django_celery_beat',  # Celery Beat periodic task scheduler
    #custom apps
    ##auth
    'authmanagement',
    'assets',
    'core',
    'business',
    'core_orders',
    'approvals',
    'addresses',
    
    # Centralized system apps
    'task_management',
    'error_handling',
    'caching',
    ## ecommerce
    'ecommerce.cart',
    'ecommerce.pos',
    'ecommerce.product',
    'ecommerce.order',
    'ecommerce.stockinventory',
    'ecommerce.vendor',
    'ecommerce.analytics',
    ###CRM
    'crm.campaigns',
    'crm.contacts',
    'crm.leads',
    'crm.pipeline',
    ###Finance
    'finance.accounts',
    'finance.expenses',
    'finance.taxes',
    # 'finance.paymentApps',  # centralized into integrations + finance.payment
    'finance.payment',
    'finance.budgets',
    'finance.cashflow',
    'finance.reconciliation',
    ###Manufacturing
    'manufacturing',
    ##Integrations
    'integrations',
    'notifications',
    ###HRM
    'hrm.appraisals',
    'hrm.employees',
    'hrm.attendance',
    'hrm.performance',
    'hrm.recruitment',
    'hrm.training',
    #'hrm.recruitment',
    'hrm.leave',
    'hrm.payroll',
    'hrm.payroll_settings',
    ## PROCUREMENT
    'procurement.purchases',
    'procurement.orders',
    'procurement.requisitions',
    'procurement.supplier_performance',
    'procurement.contracts',

]

AUTH_USER_MODEL = 'authmanagement.CustomUser'
SCHEDULER_API_ENABLED = True
SITE_ID = 1

# Celery settings
CELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')  # Redis as the message broker
CELERY_RESULT_BACKEND = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Africa/Nairobi'

# Enable Celery task eager execution in debug mode for easier testing
CELERY_TASK_ALWAYS_EAGER = DEBUG

# Celery task routes - organize tasks into queues
CELERY_TASK_ROUTES = {
    'hrm.payroll.tasks.*': {'queue': 'payroll'},
    'core.tasks.*': {'queue': 'default'},
    'core.modules.email_tasks.*': {'queue': 'emails'},
    'core.background_jobs.*': {'queue': 'background'},
    'ecommerce.order.tasks.*': {'queue': 'orders'},
    'finance.accounts.tasks.*': {'queue': 'finance'},
    'finance.payment.tasks.*': {'queue': 'finance'},
    # Centralized system tasks
    'task_management.tasks.*': {'queue': 'system'},
    'error_handling.tasks.*': {'queue': 'system'},
    'caching.tasks.*': {'queue': 'system'},
    'integrations.email.services.*': {'queue': 'emails'},
    'integrations.sms.services.*': {'queue': 'notifications'},
    # Centralized notifications
    'notifications.services.email_service.*': {'queue': 'emails'},
    'notifications.services.sms_service.*': {'queue': 'notifications'},
    'notifications.services.push_service.*': {'queue': 'notifications'},
    'notifications.services.notification_service.*': {'queue': 'notifications'},
}

# Celery task queue configuration
CELERY_TASK_DEFAULT_QUEUE = 'default'
CELERY_TASK_CREATE_MISSING_QUEUES = True

# Celery worker configuration
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000
CELERY_WORKER_DISABLE_RATE_LIMITS = False

# Celery task time limits
CELERY_TASK_SOFT_TIME_LIMIT = 300  # 5 minutes
CELERY_TASK_TIME_LIMIT = 600  # 10 minutes

# Celery result backend configuration
CELERY_RESULT_EXPIRES = 3600  # 1 hour
CELERY_RESULT_PERSISTENT = True

# Cache settings
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.environ.get('REDIS_URL', 'redis://localhost:6379/1'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'SOCKET_CONNECT_TIMEOUT': 5,
            'SOCKET_TIMEOUT': 5,
            'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
            'IGNORE_EXCEPTIONS': True,
        },
        'KEY_PREFIX': 'bengo_erp',
    }
}

# Use Redis cache for sessions
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# Cache middleware settings
CACHE_MIDDLEWARE_SECONDS = 60 * 15  # 15 minutes
CACHE_MIDDLEWARE_KEY_PREFIX = 'bengo_erp'

## SPECTACULAR ETTINGS 
SPECTACULAR_SETTINGS = {'TITLE': 'BengoBox ERP API', 'VERSION': '1.0.0'}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'core.performance.PerformanceMiddleware',  # Performance monitoring middleware
    'core.security.SecurityMiddleware',  # Enhanced security middleware
    'authmanagement.middleware.SiteWideConfigs',
    'core.middleware.CoreMiddleware',
    #'finance.accounts.middleware.TaxFormulaMiddleware',
    'hrm.payroll.middleware.PayrollFormulaMiddleware',
    'hrm.payroll_settings.middleware.TaxFormulaMiddleware',
    'hrm.attendance.middleware.DefaultShiftMiddleware',  # Auto-create Regular shift
    'business.middleware.BusinessConfigs',
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'verbose': {
            'format': '{message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',  # Adjust this level to control the log verbosity.
    },
    'loggers': {
        'ditapi_logger': {
            'handlers': ['console'],
            # Adjust this level to control the Django-specific log verbosity.
            'level': 'DEBUG',
            'propagate': False,
        },
        'django': {
            'handlers': ['console'],
            # Adjust this level to control the Django-specific log verbosity.
            'level': 'INFO',
            'propagate': False,
        },
    },
}
ROOT_URLCONF = 'ProcureProKEAPI.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ProcureProKEAPI.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Database configuration: prefer DATABASE_URL when provided
def build_db_from_url(url: str):
    parsed = urlparse(url)
    engine_map = {
        'postgres': 'django.db.backends.postgresql',
        'postgresql': 'django.db.backends.postgresql',
        'postgresql+psycopg2': 'django.db.backends.postgresql',
        'mysql': 'django.db.backends.mysql',
        'sqlite': 'django.db.backends.sqlite3',
        'sqlite3': 'django.db.backends.sqlite3',
    }
    engine = engine_map.get(parsed.scheme)
    if not engine:
        # Fallback to postgres if unknown but URL present
        engine = 'django.db.backends.postgresql'
    if engine.endswith('sqlite3'):
        db_name = parsed.path[1:] if parsed.path else os.path.join(BASE_DIR, 'db.sqlite3')
        return {
            'ENGINE': engine,
            'NAME': db_name or os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    return {
        'ENGINE': engine,
        'NAME': (parsed.path or '/')[1:],
        'USER': parsed.username or '',
        'PASSWORD': parsed.password or '',
        'HOST': parsed.hostname or 'localhost',
        'PORT': str(parsed.port or '5432'),
        'CONN_MAX_AGE': int(os.getenv('DB_CONN_MAX_AGE', '600')),
        'OPTIONS': {
            'connect_timeout': int(os.getenv('DB_CONNECT_TIMEOUT', '10')),
        },
    }

DATABASES = {}
if os.getenv('DATABASE_URL'):
    DATABASES['default'] = build_db_from_url(os.getenv('DATABASE_URL'))
else:
    # Development defaults
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME', 'bengo_erp'),
            'USER': os.getenv('DB_USER', 'postgres'),
            'PASSWORD': os.getenv('DB_PASSWORD', 'postgres'),
            'HOST': os.getenv('DB_HOST', 'localhost'),
            'PORT': os.getenv('DB_PORT', '5432'),
            'CONN_MAX_AGE': int(os.getenv('DB_CONN_MAX_AGE', '600')),
            'OPTIONS': {
                'connect_timeout': int(os.getenv('DB_CONNECT_TIMEOUT', '10')),
            },
        }
    }
# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'authmanagement.backends.EmailBackend',  # Custom backend FIRST
    'django.contrib.auth.backends.ModelBackend',
]

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-gb'
TIME_ZONE = 'Africa/Nairobi'
USE_I18N = True
USE_TZ = True

# Language settings
LANGUAGES = [
    ('en-gb', 'English (UK)'),
    ('en-us', 'English (US)'),
    ('sw', 'Swahili'),
    ('fr', 'French'),
    ('es', 'Spanish'),
    ('de', 'German'),
    ('it', 'Italian'),
    ('pt', 'Portuguese'),
    ('ru', 'Russian'),
    ('zh-hans', 'Chinese (Simplified)'),
    ('zh-hant', 'Chinese (Traditional)'),
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]
# CORS configuration - comprehensive setup for development
CORS_ALLOW_CREDENTIALS = True
_raw_cors = env_list('CORS_ALLOWED_ORIGINS', default=[
    'http://127.0.0.1:5173',
    'http://localhost:5173',
    'http://127.0.0.1:3000',
    'http://localhost:3000',
    'http://127.0.0.1:8080',
    'http://localhost:8080',
    'http://127.0.0.1:4173',
    'http://localhost:4173',
])
# Split into explicit origins (must include scheme) and wildcard patterns handled via regex
CORS_ALLOWED_ORIGINS = [o for o in _raw_cors if '://' in o]
CORS_ALLOWED_ORIGIN_REGEXES = []
for o in _raw_cors:
    if '://' in o:
        continue
    # Handle wildcard like *.example.com
    if o.startswith('*.'):
        domain = o[2:].replace('.', '\\.')
        CORS_ALLOWED_ORIGIN_REGEXES.append(rf'^https?://([^.]+\.)*{domain}$')
    elif o:
        dom = o.replace('.', '\\.')
        CORS_ALLOWED_ORIGIN_REGEXES.append(rf'^https?://{dom}$')

# CSRF trusted origins for frontend
CSRF_TRUSTED_ORIGINS = env_list('CSRF_TRUSTED_ORIGINS', default=[
    'https://erp.masterspace.co.ke',
    'http://127.0.0.1:5173',
    'http://localhost:5173',
    'http://127.0.0.1:3000',
    'http://localhost:3000',
])

# Allow all methods including OPTIONS for preflight
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Allow all necessary headers
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-branch-id',
    'x-business-id',
    'cache-control',
    'pragma',
    'if-modified-since',
    'range',
]

# Handle preflight requests properly
CORS_PREFLIGHT_MAX_AGE = 86400  # 24 hours

# Expose custom headers to frontend
CORS_EXPOSE_HEADERS = [
    'content-type',
    'content-length',
    'x-csrftoken',
    'x-branch-id',
    'x-business-id',
    'cache-control',
]

# Development mode - allow all origins for easier debugging
if DEBUG:
    CORS_ORIGIN_ALLOW_ALL = True
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOW_CREDENTIALS = True
    CORS_ALLOW_ALL_HEADERS = True
    CORS_ALLOW_ALL_METHODS = True
SPECTACULAR_SETTINGS = {
    'TITLE': 'ProcurePro API',
    'DESCRIPTION': 'ProcurePro API',
    'VERSION': '1.0.0',
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
STATIC_URL = os.getenv('STATIC_URL', "/static/")
STATIC_ROOT = os.getenv('STATIC_ROOT', os.path.join(BASE_DIR, "staticfiles"))

# Only include STATICFILES_DIRS if the directory exists (dev mode)
_static_dev_dir = os.path.join(BASE_DIR, "static")
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),) if os.path.isdir(_static_dev_dir) else ()

# Media files configuration
# In production, use S3/CDN or shared PersistentVolume
# In development, use local directory
MEDIA_URL = os.getenv('MEDIA_URL', '/media/')
MEDIA_ROOT = os.getenv('MEDIA_ROOT', os.path.join(BASE_DIR, 'media'))

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
    ],
    'DEFAULT_FILTER_INSPECTORS': [
        'rest_framework.filters.DjangoFilterInspector',
    ],
    'SEARCH_PARAM': 'q',
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
        'rest_framework_csv.renderers.AdminRenderer',  # Add this line for CSV support
        'rest_framework_csv.renderers.CSVRenderer',  # Add this line for CSV support
    ),
    'DEFAULT_PAGINATION_CLASS': 'core.pagination.StandardResultPagination',
    'PAGE_SIZE': 100,
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    # API versioning
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',
    # Global throttling (rate limiting)
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
        'rest_framework.throttling.ScopedRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '60/min',
        'user': '600/min',
    },
    # Standardized exception handler
    'EXCEPTION_HANDLER': 'core.exceptions.api_exception_handler',
}
TINYMCE_DEFAULT_CONFIG = {
    'height': 400,
    'width': 800,
    'cleanup_on_startup': True,
    'custom_undo_redo_levels': 20,
    'selector': 'textarea',
    'plugins': 'advlist autolink lists link image charmap print preview anchor, searchreplace visualblocks code fullscreen, insertdatetime media table contextmenu paste code help wordcount',
    'toolbar': 'undo redo | formatselect | bold italic backcolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | help',
    'menubar': 'file edit view insert format tools table help',
}
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
JAZZMIN_SETTINGS = JAZZMIN_SETTINGS
JAZZMIN_UI_TWEAKS = JAZZMIN_UI_TWEAKS
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CDN and Image Optimization Configuration
CDN_CONFIG = {
    'ENABLED': env_bool('CDN_ENABLED', default=False),
    'PROVIDER': os.getenv('CDN_PROVIDER', 'cloudfront'),  # cloudfront, cloudinary, imagekit
    'DOMAIN': os.getenv('CDN_DOMAIN', ''),
    'SECURE': env_bool('CDN_SECURE', default=True),
}

# AWS S3 Configuration for CDN and Media Storage
# Enable S3 for media files in production by setting USE_S3=true
USE_S3 = env_bool('USE_S3', default=False)
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID', '')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY', '')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME', '')
AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME', 'us-east-1')
AWS_S3_CUSTOM_DOMAIN = os.getenv('AWS_S3_CUSTOM_DOMAIN', '')
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
AWS_DEFAULT_ACL = os.getenv('AWS_DEFAULT_ACL', 'public-read')
AWS_QUERYSTRING_AUTH = env_bool('AWS_QUERYSTRING_AUTH', default=False)

# Use S3 for media storage if configured
if USE_S3 and AWS_STORAGE_BUCKET_NAME:
    # Requires django-storages: pip install django-storages[s3]
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN or f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"}/'

# CloudFront Configuration
CLOUDFRONT_DOMAIN = os.environ.get('CLOUDFRONT_DOMAIN', '')
CLOUDFRONT_DISTRIBUTION_ID = os.environ.get('CLOUDFRONT_DISTRIBUTION_ID', '')

# Image Optimization Configuration
IMAGE_OPTIMIZATION = {
    'ENABLED': os.environ.get('IMAGE_OPTIMIZATION_ENABLED', 'True').lower() == 'true',
    'QUALITY': int(os.environ.get('IMAGE_QUALITY', 85)),
    'FORMATS': ['JPEG', 'PNG', 'WEBP'],
    'SIZES': {
        'thumbnail': (150, 150),
        'small': (300, 300),
        'medium': (600, 600),
        'large': (1200, 1200),
        'original': None,
    },
    'COMPRESSION': {
        'JPEG': {'quality': 85, 'progressive': True},
        'PNG': {'optimize': True},
        'WEBP': {'quality': 85, 'lossless': False},
    },
    'LAZY_LOADING': os.environ.get('IMAGE_LAZY_LOADING', 'True').lower() == 'true',
    'RESPONSIVE_IMAGES': os.environ.get('RESPONSIVE_IMAGES', 'True').lower() == 'true',
}

# Data upload limits - increase to handle large forms with many permissions
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000  # Increased from default 1000 to handle large permission sets
DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB - increased from default 2.5MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB - increased from default 2.5MB

# Static and Media Files CDN Configuration
if CDN_CONFIG['ENABLED'] and CDN_CONFIG['DOMAIN']:
    STATIC_URL = f"https://{CDN_CONFIG['DOMAIN']}/static/"
    MEDIA_URL = f"https://{CDN_CONFIG['DOMAIN']}/media/"
else:
    STATIC_URL = "/static/"
    MEDIA_URL = '/media/'

# Channels Configuration for WebSocket support
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': os.getenv('CHANNEL_BACKEND', 'channels.layers.InMemoryChannelLayer'),
        # For Redis backend in production, set:
        # CHANNEL_BACKEND=channels_redis.core.RedisChannelLayer
        # and CHANNEL_URL=redis://:password@host:6379/2
        **({'CONFIG': { 'hosts': [os.getenv('CHANNEL_URL')] }} if os.getenv('CHANNEL_URL') else {})
    }
}
