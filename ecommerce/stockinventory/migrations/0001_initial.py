# Generated by Django 5.2.7 on 2025-10-25 21:43

import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('business', '0001_initial'),
        ('contacts', '0001_initial'),
        ('product', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Discounts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('discount_type', models.CharField(choices=[('Fixed', 'Fixed'), ('Percentage', 'Percentage')], default='Fixed', max_length=100)),
                ('discount_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount percentage value', max_digits=5)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('priority', models.IntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Discounts',
                'verbose_name_plural': 'Discounts',
                'db_table': 'discounts',
                'managed': True,
                'indexes': [models.Index(fields=['name'], name='idx_discounts_name'), models.Index(fields=['discount_type'], name='idx_discounts_type'), models.Index(fields=['is_active'], name='idx_discounts_active'), models.Index(fields=['start_date'], name='idx_discounts_start_date'), models.Index(fields=['end_date'], name='idx_discounts_end_date')],
            },
        ),
        migrations.CreateModel(
            name='StockInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_type', models.CharField(choices=[('single', 'single'), ('variable', 'variable'), ('combo', 'combo')], default='single', max_length=100)),
                ('buying_price', models.DecimalField(decimal_places=4, default=Decimal('0.00'), max_digits=14)),
                ('selling_price', models.DecimalField(decimal_places=4, default=Decimal('0.00'), max_digits=14)),
                ('profit_margin', models.DecimalField(decimal_places=4, default=Decimal('0.00'), max_digits=14)),
                ('manufacturing_cost', models.DecimalField(decimal_places=4, default=Decimal('0.00'), max_digits=14)),
                ('stock_level', models.IntegerField(default=1)),
                ('reorder_level', models.PositiveIntegerField(default=2)),
                ('usage', models.CharField(blank=True, choices=[('EX-UK', 'EX-UK'), ('Refurbished', 'Refurbished'), ('Used Like New', 'Used Like New'), ('Secod Hand', 'Second Hand'), ('New', 'New')], default='New', help_text='Leave blank if not applicable', max_length=20, null=True)),
                ('availability', models.CharField(choices=[('In Stock', 'In Stock'), ('Out of Stock', 'Out of Stock'), ('Re-Order', 'Re-Order')], default='In Stock', max_length=20)),
                ('is_new_arrival', models.BooleanField(default=False)),
                ('is_top_pick', models.BooleanField(default=False)),
                ('is_raw_material', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('delete_status', models.BooleanField(default=False)),
                ('applicable_tax', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='business.taxrates')),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stock', to='business.branch')),
                ('discount', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock', to='stockinventory.discounts')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock', to='product.products')),
                ('supplier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stock', to='contacts.contact')),
            ],
            options={
                'verbose_name': 'Stock Inventory',
                'verbose_name_plural': 'Stock Inventory',
                'db_table': 'inventory',
            },
        ),
        migrations.CreateModel(
            name='StockTransfer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transfrer_date', models.DateField(auto_now=True)),
                ('ref_no', models.CharField(blank=True, help_text='Leave blank to auto generate', max_length=100, null=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('In-Transit', 'In-Transit'), ('Completed', 'Completed')], default='Pending', max_length=50)),
                ('tranfer_notes', models.TextField(blank=True, null=True)),
                ('transfer_shipping_charge', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=14)),
                ('net_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Auto calculated field. Do not fill.', max_digits=14)),
                ('purchase_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Auto calculated field. Do not fill.', max_digits=14)),
                ('added_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_transfers', to=settings.AUTH_USER_MODEL)),
                ('branch_from', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfers_from', to='business.branch')),
                ('branch_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfers_to', to='business.branch')),
            ],
        ),
        migrations.CreateModel(
            name='StockTransferItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('sub_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Auto calculated field. Do not fill.', max_digits=14)),
                ('stock_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfer_items', to='stockinventory.stockinventory')),
                ('stock_transfer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfer_items', to='stockinventory.stocktransfer')),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name_plural': 'Units',
                'db_table': 'units',
                'managed': True,
                'indexes': [models.Index(fields=['title'], name='idx_units_title')],
            },
        ),
        migrations.AddField(
            model_name='stockinventory',
            name='unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='stockinventory.unit'),
        ),
        migrations.CreateModel(
            name='Variations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('serial', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('sku', models.CharField(blank=True, default='10011', max_length=100, null=True, unique=True)),
                ('stock_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='variations', to='stockinventory.stockinventory')),
            ],
            options={
                'verbose_name_plural': 'Variations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='VariationImages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.FileField(upload_to='products/variations/%Y%m%d/')),
                ('variation_value', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='images', to='stockinventory.variations')),
            ],
            options={
                'verbose_name_plural': 'Variation Images',
                'db_table': 'variationimages',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='stockinventory',
            name='variation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stock', to='stockinventory.variations'),
        ),
        migrations.CreateModel(
            name='Warranties',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('duration', models.IntegerField(default=6)),
                ('duration_period', models.CharField(choices=[('Days', 'Days'), ('Months', 'Months'), ('Years', 'Years')], max_length=255)),
                ('description', models.TextField(help_text='Enter product IMEI, Serial here')),
            ],
            options={
                'verbose_name_plural': 'Warranties',
                'db_table': 'warranties',
                'managed': True,
                'indexes': [models.Index(fields=['name'], name='idx_warranties_name'), models.Index(fields=['duration'], name='idx_warranties_duration')],
            },
        ),
        migrations.AddField(
            model_name='stockinventory',
            name='warranty',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock', to='stockinventory.warranties'),
        ),
        migrations.CreateModel(
            name='StockAdjustment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref_no', models.CharField(blank=True, help_text='Leave blank to auto genrate', max_length=50, null=True)),
                ('adjustment_type', models.CharField(choices=[('increase', 'Increase'), ('decrease', 'Decrease')], max_length=10)),
                ('quantity_adjusted', models.PositiveIntegerField(default=0)),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Auto calculated field. Do not fill.', max_digits=14)),
                ('total_recovered', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total recovered fron insurance, selling item scrap or others', max_digits=14)),
                ('adjusted_at', models.DateTimeField(auto_now_add=True)),
                ('reason', models.TextField(blank=True, null=True)),
                ('adjusted_by', models.ForeignKey(blank=True, help_text='Leave blank to pick current logged in user', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stock_adjustments', to=settings.AUTH_USER_MODEL)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stock_adjustments', to='business.branch')),
                ('stock_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='adjustments', to='stockinventory.stockinventory')),
            ],
            options={
                'indexes': [models.Index(fields=['branch'], name='idx_stock_adjustment_branch'), models.Index(fields=['ref_no'], name='idx_stock_adjustment_ref_no'), models.Index(fields=['adjusted_by'], name='idx_stock_adj_by'), models.Index(fields=['stock_item'], name='idx_stock_adj_item'), models.Index(fields=['adjustment_type'], name='idx_stock_adjustment_type'), models.Index(fields=['adjusted_at'], name='idx_stock_adj_at')],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('rating', models.PositiveIntegerField(choices=[(5, 5), (4, 4), (3, 3), (2, 2), (1, 1)], default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='images', to=settings.AUTH_USER_MODEL)),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='stockinventory.stockinventory')),
            ],
            options={
                'verbose_name_plural': 'Reviews',
                'db_table': 'reviews',
                'managed': True,
                'indexes': [models.Index(fields=['stock'], name='idx_reviews_stock'), models.Index(fields=['user'], name='idx_reviews_user'), models.Index(fields=['rating'], name='idx_reviews_rating'), models.Index(fields=['created_at'], name='idx_reviews_created_at')],
            },
        ),
        migrations.CreateModel(
            name='ProductView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('view_date', models.DateTimeField(auto_now_add=True)),
                ('viewed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stockinventory.stockinventory')),
            ],
            options={
                'verbose_name': 'Product View',
                'verbose_name_plural': 'Product Views',
                'db_table': 'product_views',
                'indexes': [models.Index(fields=['stock'], name='idx_product_view_stock'), models.Index(fields=['viewed_by'], name='idx_product_view_viewed_by'), models.Index(fields=['view_date'], name='idx_product_view_date')],
            },
        ),
        migrations.CreateModel(
            name='Favourites',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favourites', to='stockinventory.stockinventory')),
            ],
            options={
                'verbose_name_plural': 'Favourites',
                'db_table': 'favourites',
                'managed': True,
                'indexes': [models.Index(fields=['user'], name='idx_favourites_user'), models.Index(fields=['stock'], name='idx_favourites_stock'), models.Index(fields=['created_at'], name='idx_favourites_created_at')],
                'unique_together': {('user', 'stock')},
            },
        ),
        migrations.CreateModel(
            name='StockTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('INITIAL', 'Opening Stock'), ('PURCHASE', 'Purchase'), ('SALE', 'Sale'), ('SALE_RETURN', 'Sale Return'), ('PURCHASE_RETURN', 'Purchase Return'), ('ADJUSTMENT', 'Adjustment'), ('TRANSFER_IN', 'Transfer In'), ('TRANSFER_OUT', 'Transfer Out'), ('STOCK_TAKE', 'Stock Take'), ('PRODUCTION', 'Production')], max_length=20)),
                ('transaction_date', models.DateTimeField(auto_now_add=True)),
                ('quantity', models.IntegerField(default=0)),
                ('notes', models.TextField(blank=True, null=True)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stock_transactions', to='business.branch')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock', to=settings.AUTH_USER_MODEL)),
                ('stock_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stockinventory.stockinventory')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Stock Transactions',
                'verbose_name_plural': 'Stock Transactions',
                'indexes': [models.Index(fields=['branch'], name='idx_stock_transaction_branch'), models.Index(fields=['transaction_type'], name='idx_stock_transaction_type'), models.Index(fields=['transaction_date'], name='idx_stock_transaction_date'), models.Index(fields=['stock_item'], name='idx_stock_trans_item'), models.Index(fields=['created_by'], name='idx_stock_trans_created')],
            },
        ),
        migrations.AddIndex(
            model_name='stocktransfer',
            index=models.Index(fields=['added_by'], name='idx_stock_transfer_added_by'),
        ),
        migrations.AddIndex(
            model_name='stocktransfer',
            index=models.Index(fields=['transfrer_date'], name='idx_stock_transfer_date'),
        ),
        migrations.AddIndex(
            model_name='stocktransfer',
            index=models.Index(fields=['ref_no'], name='idx_stock_transfer_ref_no'),
        ),
        migrations.AddIndex(
            model_name='stocktransfer',
            index=models.Index(fields=['status'], name='idx_stock_transfer_status'),
        ),
        migrations.AddIndex(
            model_name='stocktransfer',
            index=models.Index(fields=['branch_from'], name='idx_stock_transfer_from'),
        ),
        migrations.AddIndex(
            model_name='stocktransfer',
            index=models.Index(fields=['branch_to'], name='idx_stock_transfer_branch_to'),
        ),
        migrations.AddIndex(
            model_name='stocktransferitem',
            index=models.Index(fields=['stock_transfer'], name='idx_stock_transfer_item'),
        ),
        migrations.AddIndex(
            model_name='stocktransferitem',
            index=models.Index(fields=['stock_item'], name='idx_stock_transfer_item_stock'),
        ),
        migrations.AddIndex(
            model_name='variations',
            index=models.Index(fields=['stock_item'], name='idx_variations_stock_item'),
        ),
        migrations.AddIndex(
            model_name='variations',
            index=models.Index(fields=['title'], name='idx_variations_title'),
        ),
        migrations.AddIndex(
            model_name='variations',
            index=models.Index(fields=['serial'], name='idx_variations_serial'),
        ),
        migrations.AddIndex(
            model_name='variations',
            index=models.Index(fields=['sku'], name='idx_variations_sku'),
        ),
        migrations.AddIndex(
            model_name='variationimages',
            index=models.Index(fields=['variation_value'], name='idx_variation_images_variation'),
        ),
        migrations.AddIndex(
            model_name='stockinventory',
            index=models.Index(fields=['product'], name='idx_stock_inventory_product'),
        ),
        migrations.AddIndex(
            model_name='stockinventory',
            index=models.Index(fields=['product_type'], name='idx_stock_inv_product_type'),
        ),
        migrations.AddIndex(
            model_name='stockinventory',
            index=models.Index(fields=['variation'], name='idx_stock_inventory_variation'),
        ),
        migrations.AddIndex(
            model_name='stockinventory',
            index=models.Index(fields=['branch'], name='idx_stock_inventory_branch'),
        ),
        migrations.AddIndex(
            model_name='stockinventory',
            index=models.Index(fields=['supplier'], name='idx_stock_inventory_supplier'),
        ),
        migrations.AddIndex(
            model_name='stockinventory',
            index=models.Index(fields=['availability'], name='idx_stock_inv_availability'),
        ),
        migrations.AddIndex(
            model_name='stockinventory',
            index=models.Index(fields=['is_new_arrival'], name='idx_stock_inv_new_arrival'),
        ),
        migrations.AddIndex(
            model_name='stockinventory',
            index=models.Index(fields=['is_top_pick'], name='idx_stock_inv_top_pick'),
        ),
        migrations.AddIndex(
            model_name='stockinventory',
            index=models.Index(fields=['delete_status'], name='idx_stock_inv_delete_status'),
        ),
        migrations.AddIndex(
            model_name='stockinventory',
            index=models.Index(fields=['created_at'], name='idx_stock_inventory_created_at'),
        ),
    ]
