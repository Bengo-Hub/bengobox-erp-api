# Generated by Django 5.2.7 on 2025-10-25 21:43

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import timezone_field.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='SecuritySettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_password_length', models.PositiveIntegerField(default=8)),
                ('require_uppercase', models.BooleanField(default=True)),
                ('require_lowercase', models.BooleanField(default=True)),
                ('require_numbers', models.BooleanField(default=True)),
                ('require_special_chars', models.BooleanField(default=True)),
                ('password_expiry_days', models.PositiveIntegerField(default=90)),
                ('max_login_attempts', models.PositiveIntegerField(default=5)),
                ('lockout_duration_minutes', models.PositiveIntegerField(default=30)),
                ('session_timeout_minutes', models.PositiveIntegerField(default=480)),
                ('max_concurrent_sessions', models.PositiveIntegerField(default=3)),
                ('require_2fa_for_admins', models.BooleanField(default=True)),
                ('require_2fa_for_sensitive_operations', models.BooleanField(default=True)),
                ('enable_security_alerts', models.BooleanField(default=True)),
                ('alert_email_addresses', models.JSONField(default=list)),
                ('allowed_ip_ranges', models.JSONField(default=list)),
                ('block_suspicious_ips', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Security Settings',
                'verbose_name_plural': 'Security Settings',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(blank=True, max_length=150, null=True, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Official Email')),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=150)),
                ('middle_name', models.CharField(blank=True, max_length=255, null=True)),
                ('phone', models.CharField(blank=True, default='+254743793901', max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Please enter a valid Kenyan phone number.', regex='^(?:\\+?254|0)(?:\\d{9}|\\d{3}\\s\\d{3}\\s\\d{3}|\\d{2}\\s\\d{3}\\s\\d{3})$')])),
                ('pic', models.ImageField(blank=True, null=True, upload_to='userprofiles')),
                ('timezone', timezone_field.fields.TimeZoneField(blank=True, choices_display='WITH_GMT_OFFSET', default='Africa/Nairobi', null=True, use_pytz=True)),
                ('email_confirm_token', models.CharField(default='token', max_length=255)),
                ('ip_address', models.CharField(default='192.168.0.1', max_length=100)),
                ('device', models.CharField(default='Phone', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
        ),
        migrations.CreateModel(
            name='AccountLockout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('failed_attempts', models.PositiveIntegerField(default=0)),
                ('locked_until', models.DateTimeField(blank=True, null=True)),
                ('is_locked', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lockouts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Account Lockout',
                'verbose_name_plural': 'Account Lockouts',
            },
        ),
        migrations.CreateModel(
            name='AccountRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'indexes': [models.Index(fields=['email'], name='idx_account_request_email'), models.Index(fields=['status'], name='idx_account_request_status'), models.Index(fields=['created_at'], name='idx_account_request_created_at')],
            },
        ),
        migrations.CreateModel(
            name='Backup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('full', 'Full Backup'), ('incremental', 'Incremental Backup')], max_length=20)),
                ('path', models.CharField(max_length=255)),
                ('size', models.BigIntegerField(help_text='Size in bytes')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'indexes': [models.Index(fields=['type'], name='idx_backup_type'), models.Index(fields=['status'], name='idx_backup_status'), models.Index(fields=['created_at'], name='idx_backup_created_at')],
            },
        ),
        migrations.CreateModel(
            name='BackupConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('storage_type', models.CharField(choices=[('local', 'Local Storage'), ('s3', 'Amazon S3')], default='local', max_length=10)),
                ('local_path', models.CharField(blank=True, max_length=255, null=True)),
                ('s3_bucket', models.CharField(blank=True, max_length=255, null=True)),
                ('s3_region', models.CharField(blank=True, max_length=50, null=True)),
                ('s3_access_key', models.CharField(blank=True, max_length=255, null=True)),
                ('s3_secret_key', models.CharField(blank=True, max_length=255, null=True)),
                ('retention_days', models.PositiveIntegerField(default=30)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'indexes': [models.Index(fields=['storage_type'], name='idx_backup_config_storage_type')],
            },
        ),
        migrations.CreateModel(
            name='BackupSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('custom', 'Custom')], max_length=10)),
                ('cron_expression', models.CharField(blank=True, max_length=100, null=True)),
                ('last_run', models.DateTimeField(blank=True, null=True)),
                ('next_run', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'indexes': [models.Index(fields=['frequency'], name='idx_backup_schedule_frequency'), models.Index(fields=['is_active'], name='idx_backup_schedule_active'), models.Index(fields=['next_run'], name='idx_backup_schedule_next_run')],
            },
        ),
        migrations.CreateModel(
            name='PasswordPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_length', models.PositiveIntegerField(default=8)),
                ('require_uppercase', models.BooleanField(default=True)),
                ('require_lowercase', models.BooleanField(default=True)),
                ('require_numbers', models.BooleanField(default=True)),
                ('require_special_chars', models.BooleanField(default=True)),
                ('password_expiry_days', models.PositiveIntegerField(default=90)),
                ('max_login_attempts', models.PositiveIntegerField(default=5)),
                ('lockout_duration_minutes', models.PositiveIntegerField(default=30)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'indexes': [models.Index(fields=['created_at'], name='idx_password_policy_created_at')],
            },
        ),
        migrations.CreateModel(
            name='SecurityAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('login_success', 'Login Success'), ('login_failed', 'Login Failed'), ('logout', 'Logout'), ('password_change', 'Password Change'), ('password_reset', 'Password Reset'), ('account_locked', 'Account Locked'), ('account_unlocked', 'Account Unlocked'), ('2fa_enabled', '2FA Enabled'), ('2fa_disabled', '2FA Disabled'), ('2fa_used', '2FA Used'), ('suspicious_activity', 'Suspicious Activity'), ('admin_action', 'Admin Action'), ('data_access', 'Data Access'), ('data_modification', 'Data Modification')], max_length=50)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('details', models.JSONField(default=dict)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='low', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='security_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Security Audit Log',
                'verbose_name_plural': 'Security Audit Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TwoFactorAuth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('secret_key', models.CharField(max_length=32, unique=True)),
                ('is_enabled', models.BooleanField(default=False)),
                ('backup_codes', models.JSONField(default=list)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='two_factor_auth', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Two-Factor Authentication',
                'verbose_name_plural': 'Two-Factor Authentication',
            },
        ),
        migrations.CreateModel(
            name='UserLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('login', 'Login'), ('logout', 'Logout'), ('password_change', 'Password Change'), ('password_reset', 'Password Reset'), ('profile_update', 'Profile Update'), ('role_change', 'Role Change'), ('permission_change', 'Permission Change')], max_length=20)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['email'], name='idx_user_email'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['username'], name='idx_user_username'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['first_name'], name='idx_user_first_name'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['last_name'], name='idx_user_last_name'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['is_active'], name='idx_user_active'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['is_staff'], name='idx_user_staff'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['created_at'], name='idx_user_created_at'),
        ),
        migrations.AlterUniqueTogether(
            name='accountlockout',
            unique_together={('user', 'ip_address')},
        ),
        migrations.AddIndex(
            model_name='securityauditlog',
            index=models.Index(fields=['user', 'event_type', 'created_at'], name='authmanagem_user_id_1cf405_idx'),
        ),
        migrations.AddIndex(
            model_name='securityauditlog',
            index=models.Index(fields=['ip_address', 'created_at'], name='authmanagem_ip_addr_cb429d_idx'),
        ),
        migrations.AddIndex(
            model_name='securityauditlog',
            index=models.Index(fields=['severity', 'created_at'], name='authmanagem_severit_49814b_idx'),
        ),
        migrations.AddIndex(
            model_name='userlog',
            index=models.Index(fields=['user'], name='idx_user_log_user'),
        ),
        migrations.AddIndex(
            model_name='userlog',
            index=models.Index(fields=['action'], name='idx_user_log_action'),
        ),
        migrations.AddIndex(
            model_name='userlog',
            index=models.Index(fields=['created_at'], name='idx_user_log_created_at'),
        ),
    ]
